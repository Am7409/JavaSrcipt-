// Writing into an HTML element, using innerHTML. this is useful for writting the results to elements as html
                            // HTml part :-   <p id="demo"></p>
                            // Java script part :- document.getElementById("demo").innerHTML = 5 + 6;
                                                    // This statement tells the browser to write "Hello Dolly." inside an HTML element with id="demo":

// Writing into the HTML output using document.write(). : -  useful for the output to the broweser screen 
           // document.write("some statement")


// Writing into an alert box, using window.alert(). useful for the making the alert in  the screen 
        // window.alert("some alert") or we can write this as alert('some alert') also both are the same thing 
        //important note : You can skip the window keyword.  In JavaScript, the window object is the global scope object, that means that variables, properties, and methods by default belong to the window object. This also means that specifying the window keyword is optional:


// Writing into the browser console, using console.log(). :- useful for the writing the output to the console
      // console.log("Hello world");

// javascript print : this useful  for the The only exception is that you can call the "window.print()" method in the browser to print the content of the current window.
      // <button onclick="window.print()">Print this page</button>
      // this can print the current page of the web browser page 


let nam ='Hello'
let na="World"
console.log(nam ,na);

// 1. Ways to print in JavaScript
// console.log("Hello World");
// alert("me");
// document.write("this is document write")

// 2. Javascript console API
// console.log("Hello World", 4 + 6, "Another log");
// console.warn("this is warning");
// console.error("This is an error");


3. JavaScript Variables
// What are Variables? - Containers to store data values
//In javascript we have the two ways to initialise the variables by :
//   "let" and "var" for below types of the data types 
var number1 = 34;
var number2 = 56;
// console.log(number1 + number2);
/*
multi 
line 
commment
*/


// 4. Data types in JavaScript
      // a: Numbers
      var num1 = 455;
      var num2 = 56.76;

      //b: String
      var str1 = "This is a string";
      var str2 = 'This is also a string';

      //c: Objects
      var marks = {
          ravi: 34,
          shubham: 78,
          harry: 99.977
      }
      // console.log(marks); it prints all the member objects in the given object

      // d: Booleans
      var a = true;
      var b = false;
      // console.log(a, b);

      //e: var und = undefined;
      var und;   // by default the value of the variable is undefined if the value is not assigened to the varible 
      // console.log(und);

      var n = null; // it is differnet from the undifiend by saying that the devloper wants to not givning the value to the variables by assign it the "null" keyword
      // console.log(n);
      
      
/*
At a very high level, there are two types of data types in JavaScript
1. Primitive data types: undefined, null, number, string, boolean, symbol
2. Reference data types: Arrays and Objects
*/

var arr = [1, 2, "bablu", 4, 5]
// console.log(arr)


// 5. Operators in JavaScript
          // Arithmetic Operators
          var a = 100;
          var b = 10;
          // console.log("The value of a + b is ", a+b);
          // console.log("The value of a - b is ", a-b);
          // console.log("The value of a * b is ", a*b);
          // console.log("The value of a / b is ", a/b);

          // Assignment Operators
          var c = b;
          // c += 2;
          // c -= 2; // c = c - 2;
          // c *= 2;
          // c /= 2;
          // console.log(c);

          // Comparison Operators
          var x = 34;
          var y = 56;
          // console.log(x == y);
          // console.log(x >= y);
          // console.log(x <= y);
          // console.log(x > y);
          // console.log(x < y);

          // Logical Operators

          // Logical and
          // console.log(true && true)
          // console.log(true && false)
          // console.log(false && true)
          // console.log(false && false)

          // Logical or
          // console.log(true || true)
          // console.log(true || false)
          // console.log(false || true)
          // console.log(false || false)

          // Logical not
          // console.log(!false);
      
      // console.log(!true);
